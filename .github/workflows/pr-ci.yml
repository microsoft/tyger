name: Tyger

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  tyger-build-deploy:
      runs-on: ["self-hosted", "1ES.Pool=tyger-gh-1es2"]
      container:
        image: compimagdevcontainers.azurecr.io/tyger@sha256:1285398df96fbd37cdc574834e49c7bdb7260f8c98f7aabb3469ac98085f70af
        options: -v /mnt/storage:/__w/tyger
      defaults:
        run:
          shell: bash
      steps:
        - name: 'Check disk space'
          run: |
            set -euo pipefail
            df -h
            lsblk

        - name: 'Login into Azure'
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        - name: 'Manual Azure Login'
          env:
            AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          run: |
            set -euo pipefail

            # get JWT from GitHub's OIDC provider
            # see https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#updating-your-actions-for-oidc
            jwt_token=$(
                curl \
                    -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                    "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" \
                    --silent \
                | jq -r ".value"
            )

            # perform OIDC token exchange
            az login \
                --service-principal -u $AZURE_CLIENT_ID \
                --tenant $AZURE_TENANT_ID \
                --federated-token $jwt_token \
                -o none

            az account set \
                --subscription $AZURE_SUBSCRIPTION_ID \
                -o none

        - name: Checkout
          uses: actions/checkout@v3

        - name: 'Set variables'
          id: set-variables
          run: |
            set -eo pipefail
            event_name="${{ github.event_name }}"
            if [ "$event_name" == "pull_request" ]; then
              environment_name="tyger-pr${{ github.event.pull_request.number }}"
            else
              environment_name="tygerwestus2"
            fi
            tyger_uri=$(TYGER_ENVIRONMENT_NAME="${environment_name}" make -s get-tyger-uri)
            echo "TYGER_ENVIRONMENT_NAME=$environment_name" >> "$GITHUB_OUTPUT"
            echo "TYGER_URI=$tyger_uri" >> "$GITHUB_OUTPUT"

        - name: 'Verify devcontainer'
          shell: bash
          env:
            DEVCONTAINER_IMAGE: compimagdevcontainers.azurecr.io/tyger@sha256:1285398df96fbd37cdc574834e49c7bdb7260f8c98f7aabb3469ac98085f70af
          run: |
            set -euo pipefail
            if [[ "$(.devcontainer/get-devcontainer-image.sh)" != "${DEVCONTAINER_IMAGE}" ]]; then
              echo "The devcontainer image in azure-pipelines.yml and devcontainer.json must be the same"
            fi

            docker build -f .devcontainer/Dockerfile --target devcontainer -t devcontainer --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${DEVCONTAINER_IMAGE} .

            if ! .devcontainer/diff-container-images.sh "${DEVCONTAINER_IMAGE}" devcontainer; then
              echo 'Error: the "image" field in devcontainer.json does not reflect the current "devcontainer" target of the Dockerfile. Run .devcontainer/update-devcontainer-image.sh to correct this.'
              exit 1
            fi

        - name: 'Bulid and verify format'
          run: |
            set -eo pipefail
            source /opt/conda/etc/profile.d/conda.sh
            conda activate /opt/conda/envs/tyger
            make restore
            make verify-format

        - name: 'Deploy and test'
          env:
            TYGER_ENVIRONMENT_NAME: ${{ steps.set-variables.outputs.TYGER_ENVIRONMENT_NAME }}
            TYGER_URI: ${{ steps.set-variables.outputs.TYGER_URI }}
          run: |
            set -xeo pipefail
            source /opt/conda/etc/profile.d/conda.sh
            conda activate /opt/conda/envs/tyger
            export TYGER_ENVIRONMENT_CONFIG_DIR="${GITHUB_WORKSPACE}/deploy/config/dev/ci"
            echo "TYGER_ENVIRONMENT_CONFIG_DIR=$TYGER_ENVIRONMENT_CONFIG_DIR"
            set -euo pipefail
            make -s -j 8

        - name: 'Cleanup'
          env:
            TYGER_ENVIRONMENT_NAME: ${{ steps.set-variables.outputs.TYGER_ENVIRONMENT_NAME }}
            TYGER_URI: ${{ steps.set-variables.outputs.TYGER_URI }}
          run: |
            set -eo pipefail
            source /opt/conda/etc/profile.d/conda.sh
            conda activate /opt/conda/envs/tyger

            # Point to scale-to-zero config
            export TYGER_ENVIRONMENT_CONFIG_DIR="${GITHUB_WORKSPACE}/deploy/config/dev"

            echo "scaling cluster back down"
            make ensure-environment
