name: Log in to Azure
description: |
  Log in to Azure either using managed identity or the azure/login action.

runs:
  using: composite
  steps:

    # Workaround for regression in MSAL: https://github.com/Azure/login/issues/372#issuecomment-2056289617
    - name: downgrade Azure CLI (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get remove -y azure-cli
        sudo apt-get update
        sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release
        sudo mkdir -p /etc/apt/keyrings
        curl -sLS https://packages.microsoft.com/keys/microsoft.asc |
            sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/microsoft.gpg
        sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
        AZ_DIST=$(lsb_release -cs)
        echo "Types: deb
        URIs: https://packages.microsoft.com/repos/azure-cli/
        Suites: ${AZ_DIST}
        Components: main
        Architectures: $(dpkg --print-architecture)
        Signed-by: /etc/apt/keyrings/microsoft.gpg" | sudo tee /etc/apt/sources.list.d/azure-cli.sources
        AZ_VER=2.75.0
        sudo apt-get update && sudo apt-get install azure-cli=${AZ_VER}-1~${AZ_DIST}

    - name: downgrade Azure CLI (Linux)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Start-Process msiexec.exe -Wait -ArgumentList '/x {DEFB65A7-FD02-4710-B01E-6C9387982CA9} /quiet'
        $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://azcliprod.blob.core.windows.net/msi/azure-cli-2.58.0-x64.msi -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\AzureCLI.msi

    - name: Log in to Azure
      if: ${{ env.CAN_ACCESS_SECRETS }}
      uses: azure/login@v2
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

    # Until the CLI handles refreshing the OIDC token, we do it here.
    # We only do this on Linux, because long-running deployment jobs are run on Linux.
    # On Windows, we assume that we can complete the job within 5 minutes.
    - name: Begin Azure Login Refresh Loop
      if: ${{ env.CAN_ACCESS_SECRETS && runner.os == 'Linux' }}
      shell: bash
      run: |
        set -euo pipefail
        # Background refresh of Azure federated token every 4 minutes.
        # Requires workflow permissions: permissions: id-token: write
        cat > /tmp/azure-login-refresh.sh <<'EOF'
        #!/usr/bin/env bash
        set -euo pipefail
        CLIENT_ID="${AZURE_CLIENT_ID}"
        TENANT_ID="${AZURE_TENANT_ID}"
        SUBSCRIPTION_ID="${AZURE_SUBSCRIPTION_ID:-}"
        AUDIENCE="api://AzureADTokenExchange"

        refresh() {
          if [[ -z "${ACTIONS_ID_TOKEN_REQUEST_TOKEN:-}" || -z "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" ]]; then
            echo "[azure-refresh] ID token request env vars missing; cannot refresh." >&2
            return 1
          fi
          # Fetch federated token JSON: { "value": "<jwt>" }
          RESPONSE="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=${AUDIENCE}")" || return 1
          # Parse with jq (requested: no Python). jq is preinstalled on GitHub-hosted Linux runners.
          if ! command -v jq >/dev/null 2>&1; then
            echo "[azure-refresh] jq not found; cannot parse token." >&2
            return 1
          fi
          TOKEN="$(echo "$RESPONSE" | jq -r '.value // empty' 2>/dev/null || true)"
          if [[ -z "${TOKEN}" ]]; then
            echo "[azure-refresh] Failed to extract federated token from response: ${RESPONSE}" >&2
            return 1
          fi
          az login --federated-token "${TOKEN}" --service-principal -u "${CLIENT_ID}" --tenant "${TENANT_ID}" >/dev/null 2>&1 || return 1
          if [[ -n "${SUBSCRIPTION_ID}" ]]; then
            az account set -s "${SUBSCRIPTION_ID}" >/dev/null 2>&1 || true
          fi
          echo "[azure-refresh] Refreshed at $(date -u +%FT%TZ)" >&2
        }

        echo "[azure-refresh] Starting background Azure token refresh loop (interval 4m)." >&2
        while true; do
          sleep 240
          refresh || echo "[azure-refresh] Refresh attempt failed." >&2
        done
        EOF

        (nohup bash /tmp/azure-login-refresh.sh >/dev/null 2>&1 & disown) || true
        echo "Background Azure login refresh started."

    - name: Log in to Azure with managed identity
      if: ${{ ! env.CAN_ACCESS_SECRETS }}
      shell: bash
      run: |
        az login --identity --username $AZURE_CLIENT_ID
