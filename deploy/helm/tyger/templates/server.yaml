{{- $tygerName := include "tyger.fullname" . -}}
{{- if not (.Values.onlyMigrationDependencies) }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ required "A value for identity.tygerServer.name is required" .Values.identity.tygerServer.name }}
  annotations:
    azure.workload.identity/client-id: {{ required "A value for identity.tygerServer.clientId is required" .Values.identity.tygerServer.clientId }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $tygerName }}-server
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "services"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["*"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "delete", "deletecollection"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $tygerName }}-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $tygerName }}-server
subjects:
- kind: ServiceAccount
  name: {{ .Values.identity.tygerServer.name }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $tygerName }}-job
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ $tygerName }}-job
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
{{- range $index, $element := .Values.identity.custom }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $tygerName}}-custom-{{ $element.name }}-job
  annotations:
    azure.workload.identity/client-id: {{ $element.clientId }}
---
{{- end }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ $tygerName }}-job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $tygerName }}-job
subjects:
- kind: ServiceAccount
  name: {{ $tygerName }}-job
{{- range $index, $element := .Values.identity.custom }}
- kind: ServiceAccount
  name: {{ $tygerName}}-custom-{{ $element.name }}-job
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $tygerName }}-server
spec:
  selector:
    matchLabels:
      component: {{ $tygerName }}-server
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate # For inner-loop local development. TODO: parameterize
  template:
    metadata:
      labels:
        component: {{ $tygerName }}-server
        tyger-helm-revision: "{{ .Release.Revision }}"
        azure.workload.identity/use: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  component: {{ $tygerName }}-server
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: tyger
          image: {{ required "A value for image is required" .Values.image }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - containerPort: 5000
          env:
            - name: ASPNETCORE_URLS
              value: http://+:5000
            - name: KeyPerFileDirectory
              value: /etc/secrets/
            - name: AZURE_CLIENT_ID
              value: {{ .Values.identity.tygerServer.clientId }}
            - name: ServiceMetadata__ExternalBaseUrl
              value: https://{{ required "A value for hostname is required" .Values.hostname }}
            - name: Auth__Enabled
              value: "{{ .Values.security.enabled }}"
          {{- if .Values.security.enabled }}
            - name: Auth__Authority
              value: {{ required "When security.enabled is true, a value for security.authority is required" .Values.security.authority }}
            - name: Auth__Audience
              value: {{ required "When security.enabled is true, a value for security.audience is required" .Values.security.audience }}
            - name: Auth__CliAppUri
              value: {{ required "When security.enabled is true, a value for security.cliAppUri is required" .Values.security.cliAppUri }}
          {{- end }}
            - name: Compute__Kubernetes__Namespace
              value: {{ .Release.Namespace }}
            - name: Compute__Kubernetes__JobServiceAccount
              value: {{ $tygerName }}-job
            - name: Compute__Kubernetes__NoOpConfigMap
              value: {{ $tygerName }}-no-op
            - name: Compute__Kubernetes__WorkerWaiterImage
              value: {{ required "A value for workerWaiterImage is required" .Values.workerWaiterImage }}
            - name: Compute__Kubernetes__CurrentPodUid
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            {{- range $i, $cluster := .Values.clusterConfiguration }}
            - name: Compute__Kubernetes__Clusters__{{ $i }}__Name
              value: "{{ $cluster.name }}"
            - name: Compute__Kubernetes__Clusters__{{ $i }}__Location
              value: "{{ $cluster.location }}"
            - name: Compute__Kubernetes__Clusters__{{ $i }}__Sku
              value: "{{ $cluster.sku }}"
            - name: Compute__Kubernetes__Clusters__{{ $i }}__ApiHost
              value: "{{ $cluster.apiHost }}"
            {{- range $j, $userNodePool := $cluster.userNodePools }}
            - name: Compute__Kubernetes__Clusters__{{ $i }}__UserNodePools__{{ $j }}__Name
              value: "{{ $userNodePool.name }}"
            - name: Compute__Kubernetes__Clusters__{{ $i }}__UserNodePools__{{ $j }}__VmSize
              value: "{{ $userNodePool.vmSize }}"
            {{- end }}
            {{- end }}
            {{- range $index, $element := .Values.identity.custom }}
            - name: Compute__Kubernetes__CustomIdentities__{{ $element.name }}
              value: {{ $tygerName}}-custom-{{ $element.name }}-job
            {{- end }}
            - name: Database__Host
              value: {{ .Values.database.host }}
            - name: Database__DatabaseName
              value: {{ .Values.database.databaseName }}
            - name: Database__Port
              value: "{{ .Values.database.port }}"
            - name: Database__Username
              value: {{ .Values.identity.tygerServer.name }}
            - name: Database__TygerServerRoleName
              value: {{ .Values.identity.tygerServer.name }}
            - name: Database__TygerServerIdentity
              value: {{ .Values.identity.tygerServer.name }}
            - name: Database__AutoMigrate
              value: "{{ .Values.database.autoMigrate }}"
            - name: Buffers__CloudStorage__DefaultLocation
              value: "{{ .Values.location }}"
            {{- range $index, $element := .Values.buffers.storageAccounts }}
            - name: Buffers__CloudStorage__StorageAccounts__{{ $index }}__name
              value: "{{ $element.name }}"
            - name: Buffers__CloudStorage__StorageAccounts__{{ $index }}__location
              value: "{{ $element.location }}"
            - name: Buffers__CloudStorage__StorageAccounts__{{ $index }}__endpoint
              value: "{{ $element.endpoint }}"
            {{- end }}
            - name: Buffers__BufferSidecarImage
              value: {{ required "A value for bufferSidecarImage is required" .Values.bufferSidecarImage }}
            - name: Buffers__BufferCopierImage
              value: {{ required "A value for bufferCopierImage is required" .Values.bufferCopierImage }}
            - name: LogArchive__CloudStorage__StorageAccountEndpoint
              value: {{ required "A value for logArchive.storageAccountEndpoint is required" .Values.logArchive.storageAccountEndpoint }}
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 5000
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 5000

      serviceAccount: {{ .Values.identity.tygerServer.name }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:fo
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ $tygerName }}-server
spec:
  selector:
    component: {{ $tygerName }}-server
  ports:
    - name: tyger
      protocol: TCP
      port: 8080
      targetPort: 5000
---
{{- if .Values.tls.letsEncrypt.enabled }}
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: {{ $tygerName }}-cert
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: {{ .Values.tls.letsEncrypt.email }}
    privateKeySecretRef:
      name: {{ $tygerName }}-cert
    solvers:
      - http01:
          ingress:
            class: traefik
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ .Values.hostname }}
spec:
  secretName: {{ .Values.hostname }}-tls
  issuerRef:
    name: {{ $tygerName }}-cert
    kind: Issuer
  dnsNames:
    - {{ .Values.hostname }}

---
{{- end }}
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ $tygerName }}-server
  {{- if .Values.tls.letsEncrypt.enabled }}
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/issuer: {{ $tygerName }}-cert
  {{- end }}
spec:
  {{- if .Values.tls.enabled }}
  entryPoints:
    - websecure
  {{- if .Values.tls.letsEncrypt.enabled }}
  tls:
    secretName: {{ .Values.hostname }}-tls
    domains:
      - main: {{ .Values.hostname }}
  {{- else }}
  tls: {}
  {{- end }}
  {{- else }}
  entryPoints:
  - web
  {{- end }}
  routes:
  - kind: Rule
    match: Host(`{{ required "A value for hostname is required." .Values.hostname }}`)
    services:
    - name: {{ $tygerName }}-server
      port: 8080
{{- end }}
